#!/bin/sh

# Copyright 2019 Takuro Ashie <ashie@clear-code.com>
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


# Find an available python command because recent systems install only
# "python3" instead of "python" by default. Note that """ means a block
# comment on Python, and ":" means no-op on shell script.
""":"
for cmd in python3 python; do
  $cmd -V > /dev/null 2>&1 && exec $cmd $0 "$@"
done

echo "Cannot find Python interpreter!"
exit 1
":"""

import os.path
import sys
import json
from gi import require_version as gi_require_version
gi_require_version('GLib', '2.0')
gi_require_version('IBus', '1.0')
from gi.repository import IBus
from gi.repository import GLib

loop = None
mode = None
modes_dict = None
modes_dict_default = {
    "anthy": {
        "on":            "InputMode.Hiragana",
        "active":        "InputMode.Hiragana",
        "hiragana":      "InputMode.Hiragana",
        "off":           "InputMode.Latin",
        "inactive":      "InputMode.Latin",
        "katakana":      "InputMode.Katakana",
        "half-katakana": "InputMode.HalfWidthKatakana",
        "latin":         "InputMode.Latin",
        "wide-latin":    "InputMode.WideLatin",
    },
    "kkc": {
        "on":            "InputMode.Hiragana",
        "active":        "InputMode.Hiragana",
        "hiragana":      "InputMode.Hiragana",
        "off":           "InputMode.Direct",
        "inactive":      "InputMode.Direct",
        "katakana":      "InputMode.Katakana",
        "half-katakana": "InputMode.HankakuKatakana",
        "latin":         "InputMode.Latin",
        "wide-latin":    "InputMode.WideLatin",
    },
    "mozc-jp": {
        "on":            "InputMode.Hiragana",
        "active":        "InputMode.Hiragana",
        "hiragana":      "InputMode.Hiragana",
        "off":           "InputMode.Direct",
        "inactive":      "InputMode.Direct",
        "katakana":      "InputMode.Katakana",
        "half-katakana": "InputMode.HalfWidthKatakana",
        "latin":         "InputMode.Latin",
        "wide-latin":    "InputMode.WideLatin",
    },
    "skk": {
        "on":            "InputMode.Hiragana",
        "active":        "InputMode.Hiragana",
        "hiragana":      "InputMode.Hiragana",
        "off":           "InputMode.Latin",
        "inactive":      "InputMode.Latin",
        "katakana":      "InputMode.Katakana",
        "half-katakana": "InputMode.HankakuKatakana",
        "latin":         "InputMode.Latin",
        "wide-latin":    "InputMode.WideLatin",
    },
}


def load_config_file(path):
    conf = dict()
    try:
        with open(path, "r") as f:
            conf.update(json.load(f))
    except Exception as e:
        pass
    return conf


def load_config_dir(confdir):
    conf = dict()
    try:
        files = os.listdir(confdir)
        for filename in files:
            path = os.path.join(confdir, filename)
            conf.update(load_config_file(path))
    except Exception as e:
        pass
    return conf


def load_config_path(path):
    conf = dict()
    if os.path.isdir(path):
        conf.update(load_config_dir(path))
    elif os.path.isfile(path):
        conf.update(load_config_file(path))
    return conf


def load_config():
    conf = dict(modes_dict_default)
    system_config_path = "/etc/ibus-set-input-mode"
    conf.update(load_config_path(system_config_path))
    user_config_path = os.path.expanduser("~/.config/ibus-set-input-mode")
    conf.update(load_config_path(user_config_path))
    return conf


def on_get_context_name(bus, result):
    name = bus.current_input_context_async_finish(result)
    if not name:
        sys.stderr.write("Cannot get the context name\n")
        sys.exit(1)
    IBus.InputContext.get_input_context_async(name, bus.get_connection(),
                                              None,
                                              on_get_input_context)


def on_get_input_context(bus, result):
    context = bus.get_input_context_async_finish(result)
    if not context:
        sys.stderr.write("Cannot get the context\n")
        sys.exit(1)
    context.get_engine_async(-1, None, on_get_engine, context)


def on_get_engine(bus, result, context):
    engine = bus.get_engine_async_finish(result)
    if not engine:
        sys.stderr.write("Cannot get engine\n")
        sys.exit(1)

    engine_name = engine.get_name()
    if engine_name not in modes_dict:
        sys.stderr.write("Unknown engine: %s\n" % engine_name)
        sys.exit(1)

    modes = modes_dict[engine_name]

    if mode not in modes:
        sys.stderr.write("Unknown mode: %s\n" % mode)
        sys.exit(1)

    context.property_activate(modes[mode], IBus.PropState.CHECKED)
    GLib.timeout_add(50, lambda: loop.quit())


def on_timeout():
    sys.stderr.write("IBus doesn't respond\n")
    sys.exit(2)


if (len(sys.argv) != 2):
    sys.stderr.write('''Usage: %s MODE
    MODE: on, off, hiragana, katakana, half-katakana, latin, wide-latin
'''
                     % sys.argv[0])
    sys.exit(1)

mode = sys.argv[1]
modes_dict = load_config()

IBus.init()
bus = IBus.Bus()
bus.current_input_context_async(-1, None, on_get_context_name)
loop = GLib.MainLoop()
GLib.timeout_add(1000, on_timeout)
loop.run()
